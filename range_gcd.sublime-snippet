<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

const int N = 5e5 + 9;
int a[N];
struct ST {
  #define lc (n << 1)
  #define rc ((n << 1) + 1)
  long long t[4 * N], lazy[4 * N];
  ST() {
    memset(t, 0, sizeof t);
    memset(lazy, 0, sizeof lazy);
  }
  inline long long combine(long long a,long long b) { // change this
    return __gcd(a, b);
  }
  inline void pull(int n) { // change this
    t[n] = __gcd(t[lc], t[rc]);
  }
  void build(int n, int b, int e) {
    lazy[n] = 0; // change this
    if (b == e) {
      t[n] = a[b];
      return;
    }
    int mid = (b + e) >> 1;
    build(lc, b, mid);
    build(rc, mid + 1, e);
    pull(n);
  }
  long long query(int n, int b, int e, int i, int j) {
    if (i > e || b > j) return 0; //return null
    if (i <= b && e <= j) return t[n];
    int mid = (b + e) >> 1;
    return combine(query(lc, b, mid, i, j), query(rc, mid + 1, e, i, j));
  }
}t;
int32_t main() {
  int n; cin >> n;
  map<int, vector<int>> mp;
  for(int i = 1; i <= n; i++) {
    cin >> a[i];
    mp[a[i]].push_back(i);
  }
  t.build(1, 1, n);
  int q; cin >> q;
  while(q--) {
    int l, r; cin >> l >> r;
    int x = t.query(1, 1, n, l, r);
    // cout << x << ' ';
    int ans = upper_bound(mp[x].begin(), mp[x].end(), r) - lower_bound(mp[x].begin(), mp[x].end(), l);
    if(ans >= 0) {
        ans = r - l + 1 - ans;
    } else {
        ans = r - l + 1;
    }
    cout << ans << '\n';
  }
  return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>range_gcd</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
